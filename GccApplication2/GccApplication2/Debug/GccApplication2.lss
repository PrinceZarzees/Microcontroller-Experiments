
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000112  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000112  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005c6  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000543  00000000  00000000  00000776  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000226  00000000  00000000  00000cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e9  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  0000120d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  64:	0c 94 5d 00 	jmp	0xba	; 0xba <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <usart_init>:
#include <avr/io.h>
#define F_CPU 1000000
#include<util/delay.h>
void usart_init()
{
	UCSRA=0b00000000;
  6c:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0b00011000;
  6e:	88 e1       	ldi	r24, 0x18	; 24
  70:	8a b9       	out	0x0a, r24	; 10
	UCSRC=0b10000110;
  72:	86 e8       	ldi	r24, 0x86	; 134
  74:	80 bd       	out	0x20, r24	; 32
	UBRRL=51;
  76:	83 e3       	ldi	r24, 0x33	; 51
  78:	89 b9       	out	0x09, r24	; 9
	UBRRH=0;
  7a:	10 bc       	out	0x20, r1	; 32
  7c:	08 95       	ret

0000007e <usart_receive>:
	
}
int usart_receive()
{
	while((UCSRA & (1<<RXC))==0);
  7e:	5f 9b       	sbis	0x0b, 7	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <usart_receive>
	int temp;
	if (UCSRB & (1<<RXB8))
  82:	51 9b       	sbis	0x0a, 1	; 10
  84:	03 c0       	rjmp	.+6      	; 0x8c <usart_receive+0xe>
	temp=1<<8;
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	31 e0       	ldi	r19, 0x01	; 1
  8a:	02 c0       	rjmp	.+4      	; 0x90 <usart_receive+0x12>
	else
	temp=0;
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	30 e0       	ldi	r19, 0x00	; 0
	if (UCSRA & (1<<FE | 1<<PE | 1<<DOR))
  90:	9b b1       	in	r25, 0x0b	; 11
  92:	9c 71       	andi	r25, 0x1C	; 28
  94:	29 f4       	brne	.+10     	; 0xa0 <usart_receive+0x22>
	return 0;
	return temp|UDR;
  96:	8c b1       	in	r24, 0x0c	; 12
  98:	a9 01       	movw	r20, r18
  9a:	48 2b       	or	r20, r24
  9c:	ca 01       	movw	r24, r20
  9e:	08 95       	ret
	if (UCSRB & (1<<RXB8))
	temp=1<<8;
	else
	temp=0;
	if (UCSRA & (1<<FE | 1<<PE | 1<<DOR))
	return 0;
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
	return temp|UDR;
}
  a4:	08 95       	ret

000000a6 <main>:

int main(void)
{
	/* Replace with your application code */
	DDRB=0b11111111;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	87 bb       	out	0x17, r24	; 23
	usart_init();
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <usart_init>
	while(1)
	{
		PORTB=usart_receive()>>1;
  ae:	0e 94 3f 00 	call	0x7e	; 0x7e <usart_receive>
  b2:	95 95       	asr	r25
  b4:	87 95       	ror	r24
  b6:	88 bb       	out	0x18, r24	; 24
  b8:	fa cf       	rjmp	.-12     	; 0xae <main+0x8>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>
